#!/usr/bin/env php
<?php
use Aplia\Support\Arr;
use Aplia\Content\ContentObject;

@include_once 'config.php';
require_once 'autoload.php';

set_time_limit(0);

$cli = \eZCLI::instance();
$script = \eZScript::instance(
    array(
        'description' =>
            "Export content-objects and referenced definitions",
        'use-session' => false,
        'use-modules' => true,
        'use-extensions' => true,
    )
);
$script->startup();
$options = $script->getOptions("[format:][preamble][use-namespace][class:][parent-node:][depth:][exclude-parent][only-visible][file-storage:][include-relations][include-embeds][include-owners][include-parents][no-exclude-top-nodes][exclude-node:*][summary]", "", array(
    "format" => "Type of format, choose between json, ndjson, php and line",
    "class" => "Limit search of objects to only these type of content-classes. Comma separated list",
    "parent-node" => "Choose starting point for export, defaults to root-node 1. Specifiy either node ID, node:<id>, object:<id> or path:<alias-path>",
    "depth" => "Choose how deep in the tree structure to search, defaults to 1 level. Use * for unlimited",
    "exclude-parent" => "Exclude the parent node from the export, the result is then only the child/sub-nodes",
    "exclude-node" => "Excluded specific node from export, can be used multiple times",
    "no-exclude-top-nodes" => "Turn off exclusion of top-level nodes",
    "only-visible" => "Only export visible nodes",
    "file-storage" => "Store file content in specified folder, instead of embedding as base64 in export.",
    'include-relations' => 'Include all objects which are related in export',
    'include-embeds' => 'Include all objects which are embedded in export',
    'include-owners' => 'Include objects for all owners',
    'include-parents' => 'Include all parents of objects',
    "preamble" => "Whether to include preamble when exporting php (php format only)",
    "use-namespace" => "Whether to include ContentType namespace use statement (php format only)",
    "summary" => "Include commented summary at the end (php format only)",
));
$script->initialize();

function indentTextLines($text, $indentation=4, $first=true)
{
    $indentText = str_repeat(" ", $indentation);
    $lines = preg_split("/\r\n|\r|\n/", $text);
    if (!$first) {
        $firstLine = array_shift($lines);
    }
    $lines = array_map(function ($item) use ($indentText) { return $indentText . $item; }, $lines);
    if (!$first) {
        array_unshift($lines, $firstLine);
    }
    return implode("\n", $lines);
}

function commentTextLines($text, $first=true)
{
    $commentText = '//';
    $lines = preg_split("/\r\n|\r|\n/", $text);
    if (!$first) {
        $firstLine = array_shift($lines);
    }
    $lines = array_map(function ($item) use ($commentText) { return $commentText . $item; }, $lines);
    if (!$first) {
        array_unshift($lines, $firstLine);
    }
    return implode("\n", $lines);
}

$supportedFormats = array('line', 'json', 'ndjson', 'php');
$classNames = Arr::get($options, 'class');
if ($classNames) {
    $classNames = explode(",", $classNames);
} else {
    $classNames = null;
}
$depth = Arr::get($options, 'depth');
$depthChoice = $depth;
if ($depth === null || $depth === '') {
    // Default to depth 1 as it is the safest
    $depth = 1;
    $depthChoice = $depth;
} else if ($depth === '*') {
    $depth = null;
    $depthChoice = '*';
} else if (is_numeric($depth) && $depth >= 0) {
    $depth = (int)$depth;
    $depthChoice = $depth;
} else {
    $script->shutdown(1, "--depth must be a positive integer or * for unlimited depth");
}
$includeParent = true;
if (Arr::get($options,'exclude-parent')) {
    $includeParent = false;
}
$includeRelations = false;
if (Arr::get($options,'include-relations')) {
    $includeRelations = true;
}
$includeEmbeds = false;
if (Arr::get($options,'include-embeds')) {
    $includeEmbeds = true;
}
$includeOwners = false;
if (Arr::get($options,'include-owners')) {
    $includeOwners = true;
}
$includeParents = false;
if (Arr::get($options,'include-parents')) {
    $includeParents = true;
}
$includeTopNodes = false;
if (Arr::get($options,'no-exclude-top-nodes')) {
    $includeTopNodes = true;
}
$excludedNodes = array();
if (Arr::get($options, 'exclude-node')) {
    foreach ($options['exclude-node'] as $excludeNode) {
        $nodeMatch = decodeNodeUuid($excludeNode);
        if ($nodeMatch === null) {
            $script->shutdown(1,"No node found for match ${excludeNode}");
        }
        list($matchType, $matchNodeUuid, $matchNodeId) = $nodeMatch;
        $excludedNodes[$matchNodeUuid] = true;
    }
}
// By default we include top-level nodes from exclusion, unless told to include them
if (!$includeTopNodes) {
    $contentNode = eZContentObjectTreeNode::fetch(ContentObject::mapTreeIdentifierToNode('content'));
    $usersNode = eZContentObjectTreeNode::fetch(ContentObject::mapTreeIdentifierToNode('users'));
    $mediaNode = eZContentObjectTreeNode::fetch(ContentObject::mapTreeIdentifierToNode('media'));
    $excludedNodes[$contentNode->attribute('remote_id')] = true;
    $excludedNodes[$usersNode->attribute('remote_id')] = true;
    $excludedNodes[$mediaNode->attribute('remote_id')] = true;
}

$onlyVisible = false;
if (Arr::get($options, 'only-visible')) {
    $onlyVisible = true;
}
$phpPreamble = false;
if (Arr::get($options, 'preamble')) {
    $phpPreamble = true;
}
$useNamespace = false;
if (Arr::get($options, 'use-namespace')) {
    $useNamespace = true;
}
$summary = false;
if (Arr::get($options, 'summary')) {
    $summary = true;
}
$fileStorage = Arr::get($options, 'file-storage');
$languages = null;
$format = Arr::get($options, 'format');
if (!$format) {
    $format = 'json';
} else if (!in_array($format, $supportedFormats)) {
    $script->shutdown(1, "Unsupported format '$format', choose from: " . implode(", ", $supportedFormats));
}

if (!class_exists('Aplia\\Content\\Query\\QuerySet')) {
    $script->shutdown(1, "Please install composer package aplia/query");
}

// Reset current language list to include content languages defined in database
$allLanguages = array_map(function ($lang) { return $lang->attribute('locale'); }, eZContentLanguage::fetchList());
eZContentLanguage::setPrioritizedLanguages($allLanguages);

function decodeNodeUuid($text)
{
    if (is_numeric($text)) {
        $node = \eZContentObjectTreeNode::fetch($text);
        if (!$node) {
            return null;
        }
        return array('node_id', $node->attribute('remote_id'), $node->attribute('node_id'));
    } else if (preg_match("/^(ez)?node:([0-9]+)$/", $text, $matches)) {
        $text = $matches[2];
        $node = \eZContentObjectTreeNode::fetch($text);
        if (!$node) {
            return null;
        }
        return array('node_id', $node->attribute('remote_id'), $node->attribute('node_id'));
    } else if (preg_match("/^(ez)?node_uuid:([a-f0-9-]+)$/i", $text, $matches)) {
        $nodeUuid = strtolower(str_replace("-", "", $matches[2]));
        $node = \eZContentObjectTreeNode::fetchByRemoteID($nodeUuid);
        if (!$node) {
            return null;
        }
        return array('node_uuid', $node->attribute('remote_id'), $node->attribute('node_id'));
    } else if (preg_match("/^(ez)?object:([0-9]+)$/", $text, $matches)) {
        $objectId = $matches[2];
        $object = \eZContentObject::fetch($objectId);
        if (!$object) {
            return null;
        }
        /** @var eZContentObjectTreeNode|null */
        $node = $object->mainNode();
        if (!$node) {
            return null;
        }
        return array('object_id', $node->attribute('remote_id'), $node->attribute('node_id'));
    } else if (preg_match("/^(ez)?object_uuid:([a-f0-9-]+)$/i", $text, $matches)) {
        $objectUuid = strtolower(str_replace("-", "", $matches[2]));
        $object = \eZContentObject::fetchByRemoteID($objectUuid);
        if (!$object) {
            return null;
        }
        /** @var eZContentObjectTreeNode|null */
        $node = $object->mainNode();
        if (!$node) {
            return null;
        }
        return array('object_uuid', $node->attribute('remote_id'), $node->attribute('node_id'));
    } else if (preg_match("/^path:(.+)$/", $text, $matches)) {
        $path = $matches[1];
        $nodeId = \eZURLAliasML::fetchNodeIDByPath($path);
        if (!$nodeId) {
            return null;
        }
        $node = \eZContentObjectTreeNode::fetch($nodeId);
        if (!$node) {
            return null;
        }
        return array('path', $node->attribute('remote_id'), $node->attribute('node_id'));
    } else if ($text) {
        $path = $text;
        $nodeId = \eZURLAliasML::fetchNodeIDByPath($path);
        if (!$nodeId) {
            return null;
        }
        $node = \eZContentObjectTreeNode::fetch($nodeId);
        if (!$node) {
            return null;
        }
        return array('path', $node->attribute('remote_id'), $node->attribute('node_id'));
    } else {
        $node = \eZContentObjectTreeNode::fetch(1);
        if (!$node) {
            return null;
        }
        return array('node_id', $node->attribute('remote_id'), $node->attribute('node_id'));
    }
}

$nodes = Arr::get($options, 'arguments');
$parentNodeId = Arr::get($options, 'parent-node');
if ($parentNodeId) {
    $nodes[] = $parentNodeId;
}
foreach ($nodes as $idx => $parentNodeId) {
    $parentNode = null;
    if (is_numeric($parentNodeId)) {
        $parentNode = \eZContentObjectTreeNode::fetch($parentNodeId);
        if (!$parentNode) {
            $script->shutdown(1, "Parent node $parentNodeId does not exist");
        }
    } else if (preg_match("/^(ez)?node:([0-9]+)$/", $parentNodeId, $matches)) {
        $parentNodeId = $matches[2];
        $parentNode = \eZContentObjectTreeNode::fetch($parentNodeId);
        if (!$parentNode) {
            $script->shutdown(1, "Parent node $parentNodeId does not exist");
        }
    } else if (preg_match("/^(ez)?node_uuid:([a-f0-9-]+)$/i", $parentNodeId, $matches)) {
        $parentNodeUuid = strtolower(str_replace("-", "", $matches[2]));
        $parentNode = \eZContentObjectTreeNode::fetchByRemoteID($parentNodeUuid);
        if (!$parentNode) {
            $script->shutdown(1, "Parent node with UUID $parentNodeUuid does not exist");
        }
    } else if (preg_match("/^(ez)?object:([0-9]+)$/", $parentNodeId, $matches)) {
        $parentObjectId = $matches[2];
        $parentObject = \eZContentObject::fetch($parentObjectId);
        if (!$parentObject) {
            $script->shutdown(1, "Parent object $parentObjectId does not exist");
        }
        /** @var eZContentObjectTreeNode|null */
        $parentNode = $parentObject->mainNode();
        if (!$parentNode) {
            $script->shutdown(1, "Parent object $parentObjectId does not have main-node");
        }
        $parentNodeId = $parentNode->attribute('node_id');
    } else if (preg_match("/^(ez)?object_uuid:([a-f0-9-]+)$/i", $parentNodeId, $matches)) {
        $parentObjectUuid = strtolower(str_replace("-", "", $matches[2]));
        $parentObject = \eZContentObject::fetchByRemoteID($parentObjectUuid);
        if (!$parentObject) {
            $script->shutdown(1, "Parent object with UUID $parentObjectUuid does not exist");
        }
        /** @var eZContentObjectTreeNode|null */
        $parentNode = $parentObject->mainNode();
        if (!$parentNode) {
            $script->shutdown(1, "Parent object with UUID $parentObjectUuid does not have main-node");
        }
        $parentNodeId = $parentNode->attribute('node_id');
    } else if (preg_match("/^path:(.+)$/", $parentNodeId, $matches)) {
        $parentPath = $matches[1];
        $parentNodeId = \eZURLAliasML::fetchNodeIDByPath($parentPath);
        if (!$parentNodeId) {
            $script->shutdown(1, "Parent node with path $parentPath does not exist");
        }
        $parentNode = \eZContentObjectTreeNode::fetch($parentNodeId);
        if (!$parentNode) {
            $script->shutdown(1, "Parent node $parentNodeId for path $parentPath does not exist");
        }
    } else if ($parentNodeId) {
        $parentPath = $parentNodeId;
        $parentNodeId = \eZURLAliasML::fetchNodeIDByPath($parentPath);
        if (!$parentNodeId) {
            $script->shutdown(1, "Parent node with path $parentPath does not exist");
        }
        $parentNode = \eZContentObjectTreeNode::fetch($parentNodeId);
        if (!$parentNode) {
            $script->shutdown(1, "Parent node $parentNodeId for path $parentPath does not exist");
        }
    } else {
        $parentNode = \eZContentObjectTreeNode::fetch(1);
    }
    $nodes[$idx] = $parentNode;
}

$options = array(
    'start_depth' => 0,
    'include_relations' => $includeRelations,
    'include_embeds' => $includeEmbeds,
    'include_owners' => $includeOwners,
    'include_parents' => $includeParents,
    'excluded_nodes' => $excludedNodes,
);
if ($fileStorage) {
    $options['file_storage'] = $fileStorage;
}

// Login as admin user to make sure we have access to all content
$adminUser = \eZUser::fetch(14);
if ($adminUser) {
    $adminUser->loginCurrent();
}

$queries = array();
foreach ($nodes as $parentNode) {
    $query = new \Aplia\Content\Query\QuerySet(array(
        // Disable roles to get all nodes
        'useRoles' => false,
    ));
    if ($classNames) {
        $query = $query->classes($classNames);
    }
    if ($parentNode) {
        $query = $query->parentNode($parentNode);
        $options['start_depth'] = $parentNode->attribute('depth');
    }
    if ($depth) {
        $query = $query->depth($depth);
    }
    $query = $query->visibility($onlyVisible);
    $queries[] = array(
        'parentNode' => $parentNode,
        'query' => $query,
    );
}
$prettyPrint = true;

$exportChoices = array(
    'content_classes' => $classNames,
    'queries' => array(),
    'content_languages' => $languages,
    'depth' => $depthChoice,
    'visibility' => $onlyVisible ? 'visible' : 'visible+hidden',
);
foreach ($queries as $querySelection) {
    $parentNode = $querySelection['parentNode'];
    $exportChoices['queries'][] = array(
        'node_id' => (int)$parentNode->attribute('id'),
        'node_uuid' => $parentNode->remoteId(),
        'object_id' => (int)$parentNode->attribute('contentobject_id'),
        'object_uuid' => $parentNode->object()->remoteId(),
        'path' => $parentNode->attribute('path_identification_string'),
        'url_alias' => $parentNode->urlAlias(),
        'name' => $parentNode->getName(),
    );
}
if ($format === "line") {
    foreach ($queries as $querySelection) {
        $parentNode = $querySelection['parentNode'];
        $query = $querySelection['query'];
        if ($includeParent) {
            echo $parentNode->attribute('name'), " - ", $parentNode->className(), " (", $parentNode->attribute('contentobject_id'), ")\n";
        }
        foreach ($query as $node) {
            echo $node->attribute('name'), " - ", $node->className(), " (", $node->attribute('contentobject_id'), ")\n";
        }
    }
} else if ($format === "ndjson") {
    $exporter = new \Aplia\Content\ContentExporter($options);
    foreach ($queries as $querySelection) {
        $parentNode = $querySelection['parentNode'];
        $query = $querySelection['query'];
        if ($includeParent) {
            $exporter->addNode($parentNode);
        }
        if ($depth !== 0) {
            $exporter->addQuery($query);
        }
    }
    $exporter->finalize();
    $index = $exporter->createIndex();
    $index['export'] = $exportChoices;
    echo \Aplia\Formats\NdJson::encode($index);
    foreach ($exporter->getExportItems() as $exportItems) {
        foreach ($exportItems as $exportItem) {
            echo \Aplia\Formats\NdJson::encode($exportItem);
        }
    }
    // TODO: encode export items
} else if ($format === "json") {
    $exporter = new \Aplia\Content\ContentExporter($options);
    foreach ($queries as $querySelection) {
        $parentNode = $querySelection['parentNode'];
        $query = $querySelection['query'];
        if ($includeParent) {
            $exporter->addNode($parentNode);
        }
        if ($depth !== 0) {
            $exporter->addQuery($query);
        }
    }
    $exporter->finalize();
    $data = array(
        '__type__' => 'ez_content_bundle',
        'export_date' => (new \DateTime())->format(\DateTime::RFC3339),
        'export' => $exportChoices,
        'types' => $exporter->createTypeList(),
        'type_counts' => $exporter->createTypeCountList(),
    );
    $data = array_merge($data, $exporter->getExportItems());
    echo \Aplia\Formats\Json::encode($data, $prettyPrint), "\n";
} else if ($format === "php") {
    $exporter = new \Aplia\Content\ContentExporter($options);
    foreach ($queries as $querySelection) {
        $parentNode = $querySelection['parentNode'];
        $query = $querySelection['query'];
        if ($includeParent) {
            $exporter->addNode($parentNode);
        }
        if ($depth !== 0) {
            $exporter->addQuery($query);
        }
    }
    $exporter->finalize();

    $phpExporter = new \Aplia\Content\ContentPhpExporter($exporter);

    if ($phpPreamble) {
        $phpExporter->generatePreamble();
    }

    $data = array(
        '__type__' => 'ez_content_bundle',
        'export_date' => (new \DateTime())->format(\DateTime::RFC3339),
        'export' => $exportChoices,
        'types' => $exporter->createTypeList(),
    );
    $data = array_merge($data, $exporter->getExportItems());

    $initializedClasses = array();

    if (!isset($data['content_objects'])) {
        $data['content_objects'] = array();
    }

    foreach ($data['content_objects'] as $contentObjectId => $contentObject) {
        if (!(isset($contentObject['class_identifier']) && isset($contentObject['name']))) {
            $script->shutdown(1, "Class identifier or name not set for content object id ${contentObjectId}");
        }

        $languages = array_keys($contentObject['translations']);
        $mainLanguage = array_shift($languages);

        // First entry creates the object with attributes and locations
        $phpExporter->generateContentObjectCode($contentObjectId, $contentObject, $mainLanguage, /*withLocation*/true, /*isUpdate*/false);
        // Additional languages will only create attributes in the given language, no locations
        foreach ($languages as $language) {
            $phpExporter->generateContentObjectCode($contentObjectId, $contentObject, $language, /*withLocation*/false, /*isUpdate*/true);
        }
    }

    if ($summary) {
        echo "// Added content: \n".commentTextLines(indentTextLines(var_export($initializedClasses, true)));
    }

    if ($phpPreamble) {
        echo <<<'EOT'


$db->commit();
$script->shutdown();

EOT;
    } // end if preamble
} else {
    $script->shutdown(1, "Unknown format $format");
}

$script->shutdown();
