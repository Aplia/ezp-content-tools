#!/usr/bin/env php
<?php
use Aplia\Support\Arr;
use Aplia\Content\Query\QuerySet;
use Aplia\Content\ContentObject;
use Aplia\Content\BatchProcessor;

@include_once 'config.php';
require_once 'autoload.php';

set_time_limit(0);

$cli = \eZCLI::instance();
$script = \eZScript::instance(
    array(
        'description' =>
            "Export content-objects and referenced definitions",
        'use-session' => false,
        'use-modules' => true,
        'use-extensions' => true,
    )
);
$script->startup();
$options = $script->getOptions("[class:][parent-node:][depth:][attribute:*][only-visible][nodes][read-only][php-file:]", "", array(
    "class" => "Limit processing to only these type of content-classes. Comma separated list",
    "parent-node" => "Choose starting point for processing, defaults to root-node 1. Specifiy either node ID, node:<id>, object:<id> or path:<alias-path>",
    "depth" => "Choose how deep in the tree structure to process, defaults to 1 level. Use * for unlimited",
    "attribute" => "Limit to only attributes with given value, format is <class>/<attribute>=<value>. Values is decoded from JSON",
    "only-visible" => "Only process visible nodes",
    "nodes" => "Visit all nodes, not just main-nodes",
    "read-only" => "Only list visitied nodes, do not modify",
    "php-file" => "Load processing function from PHP file, must return array with 'process' entry",
));
$script->initialize();

// Make sure all translations are fetched
\eZContentLanguage::setPrioritizedLanguages(\eZContentLanguage::fetchLocaleList());

$objectMode = true;
$readOnly = false;
$classIdentifiers = Arr::get($options, 'class');
if ($classIdentifiers) {
    $classIdentifiers = explode(",", $classIdentifiers);
} else {
    $classIdentifiers = null;
}

$parentNode = null;
$parentNodeId = Arr::get($options, 'parent-node');
if ($parentNodeId) {
    $parentNode = ContentObject::lookupNode($parentNodeId);
}

$depth = Arr::get($options, 'depth');
$depthChoice = $depth;
if ($depth === null || $depth === '') {
    // Default to unlimited depth
    $depth = null;
    $depthChoice = $depth;
} else if ($depth === '*') {
    $depth = null;
    $depthChoice = '*';
} else if (is_numeric($depth) && $depth >= 0) {
    $depth = (int)$depth;
    $depthChoice = $depth;
} else {
    $script->shutdown(1, "--depth must be a positive integer or * for unlimited depth");
}

$onlyVisible = false;
if (Arr::get($options, 'only-visible')) {
    $onlyVisible = true;
}

if (Arr::get($options, 'nodes')) {
    $objectMode = false;
}

if (Arr::get($options, 'read-only')) {
    $readOnly = true;
}
$phpFile = Arr::get($options, 'php-file');

$attributes = array();
$attributeOption = Arr::get($options, 'attribute');
if (!$attributeOption) {
    $attributeOption = array();
}
foreach ($attributeOption as $attribute) {
    if (!preg_match("|^([a-z][a-z0-9-_]+)/([a-z][a-z0-9-_]+)=(.+)$|", $attribute, $matches)) {
        $cli->error("Invalid format for attribute filter '$attribute'");
        $script->shutdown(1);
    }
    $class = $matches[1];
    $identifier = $matches[2];
    if ($matches[3] === 'null') {
        $value = null;
    } else {
        $value = json_decode($matches[3], true);
        if ($value === null) {
            $cli->error("Invalid value for attribute filter '$attribute', could not decode from JSON");
            $script->shutdown(1);
        }
    }
    $attributes["$class/$identifier"] = $value;
}

$query = new QuerySet();
if ($classIdentifiers) {
    $allClasses = array();
    foreach (eZContentClass::fetchAllClasses() as $contentClass) {
        $allClasses[$contentClass->attribute('identifier')] = $contentClass;
    }
    foreach ($classIdentifiers as $classIdentifier) {
        if (!isset($allClasses[$classIdentifier])) {
            $cli->error("Content-class with identifier '$classIdentifier' does not exist");
            $script->shutdown(1);
        }
    }
    $query = $query->classes($classIdentifiers);
}
if ($depth !== null) {
    $query = $query->depth($depth);
}
if ($onlyVisible) {
    $query = $query->visibility(true);
}
if ($parentNode) {
    $query = $query->parentNode($parentNode);
}
if ($attributes) {
    $query = $query->loadFilters();
    foreach ($attributes as $filterName => $filterValue) {
        $query = $query->filter($filterName, $filterValue);
    }
}

$params = array(
    'objectMode' => $objectMode,
    'readOnly' => $readOnly,
    'query' => $query,
    'visit' => function ($node) {
        echo "'", $node->attribute('name'), "' (", $node->attribute('class_identifier'), "), node_id: ", $node->attribute('node_id'), ", url: ", $node->url(), "\n";
    },
);
if (!$readOnly) {
    $params['completed'] = function ($node) {
        echo "- Object was modified\n";
    };
}
if ($phpFile) {
    $result = require $phpFile;
    if (!$readOnly) {
        if (!isset($result['process'])) {
            $cli->error("PHP file '${phpFile}' did return a 'process' function");
            $script->shutdown(1);
        }
        if (!is_callable($result['process'])) {
            $cli->error("PHP file '${phpFile}' returned a 'process' value but it is not a function, got: " . get_type($result['process']));
            $script->shutdown(1);
        }
        $params['process'] = $result['process'];
    }
    if (isset($result['visit'])) {
        if (!is_callable($result['visit'])) {
            $cli->error("PHP file '${phpFile}' returned a 'visit' value but it is not a function, got: " . get_type($result['visit']));
            $script->shutdown(1);
        }
        $params['visit'] = $result['visit'];
    }
    if (isset($result['visited'])) {
        if (!is_callable($result['visited'])) {
            $cli->error("PHP file '${phpFile}' returned a 'visited' value but it is not a function, got: " . get_type($result['visited']));
            $script->shutdown(1);
        }
        $params['visited'] = $result['visited'];
    }
    if (isset($result['completed'])) {
        if (!is_callable($result['completed'])) {
            $cli->error("PHP file '${phpFile}' returned a 'completed' value but it is not a function, got: " . get_type($result['completed']));
            $script->shutdown(1);
        }
        $params['completed'] = $result['completed'];
    }
    if (isset($result['skipped'])) {
        if (!is_callable($result['skipped'])) {
            $cli->error("PHP file '${phpFile}' returned a 'skipped' value but it is not a function, got: " . get_type($result['skipped']));
            $script->shutdown(1);
        }
        $params['skipped'] = $result['skipped'];
    }
    if (isset($result['match'])) {
        if (!is_callable($result['match'])) {
            $cli->error("PHP file '${phpFile}' returned a 'match' value but it is not a function, got: " . get_type($result['match']));
            $script->shutdown(1);
        }
        $params['match'] = $result['match'];
    }
}
$processor = new BatchProcessor($params);
$processor->process();
if ($processor->visitedCount) {
    echo "Matched " . $processor->visitedCount . " objects\n";
} else {
    echo "No objects matched filter\n";
}

$script->shutdown();
